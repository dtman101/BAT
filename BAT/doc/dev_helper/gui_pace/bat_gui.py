#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.0.3
#  in conjunction with Tcl version 8.6
#    Apr 28, 2020 08:24:38 PM CEST  platform: Linux

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import bat_gui_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    bat_gui_support.set_Tk_var()
    top = Toplevel1 (root)
    bat_gui_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    bat_gui_support.set_Tk_var()
    top = Toplevel1 (w)
    bat_gui_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("823x567+250+65")
        top.minsize(1, 1)
        top.maxsize(1351, 738)
        top.resizable(1, 1)
        top.title("Bolt Analysis Tool - BAT")
        top.configure(cursor="arrow")
        top.configure(highlightcolor="black")

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.sub_menu = tk.Menu(top,tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu,
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkMenuFont",
                foreground="#000000",
                label="File")
        self.sub_menu.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                command=bat_gui_support.open_inp_menu,
                font="TkMenuFont",
                foreground="#000000",
                label="Open *.inp File")
        self.sub_menu.add_separator(
                background="#d9d9d9")
        self.sub_menu.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                command=bat_gui_support.save_menu,
                foreground="#000000",
                label="Save")
        self.sub_menu.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                command=bat_gui_support.save_as_menu,
                foreground="#000000",
                label="Save as ...")
        self.sub_menu.add_separator(
                background="#d9d9d9")
        self.sub_menu.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                command=bat_gui_support.quit_menu,
                font="TkMenuFont",
                foreground="#000000",
                label="Exit")
        self.sub_menu1 = tk.Menu(top,tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu1,
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                compound="left",
                foreground="#000000",
                label="Analysis")
        self.sub_menu1.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                command=bat_gui_support.calculate_menu,
                foreground="#000000",
                label="Calculate")
        self.sub_menu12 = tk.Menu(top,tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu12,
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkMenuFont",
                foreground="#000000",
                label="Help")
        self.sub_menu12.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                command=bat_gui_support.info_menu,
                font="TkMenuFont",
                foreground="#000000",
                label="Info")

        self.style.configure('TNotebook.Tab', background=_bgcolor)
        self.style.configure('TNotebook.Tab', foreground=_fgcolor)
        self.style.map('TNotebook.Tab', background=
            [('selected', _compcolor), ('active',_ana2color)])
        self.TNotebook = ttk.Notebook(top)
        self.TNotebook.place(relx=0.024, rely=0.035, relheight=0.929
                , relwidth=0.949)
        self.TNotebook.configure(takefocus="")
        self.TNotebook.configure(cursor="fleur")
        self.TNotebook_Bolt = tk.Frame(self.TNotebook)
        self.TNotebook.add(self.TNotebook_Bolt, padding=3)
        self.TNotebook.tab(0, text="Bolt",compound="left",underline="-1",)
        self.TNotebook_CP = tk.Frame(self.TNotebook)
        self.TNotebook.add(self.TNotebook_CP, padding=3)
        self.TNotebook.tab(1, text="Clamped Parts", compound="none"
                ,underline="-1", )
        self.TNotebook_FOS = tk.Frame(self.TNotebook)
        self.TNotebook.add(self.TNotebook_FOS, padding=3)
        self.TNotebook.tab(2, text="FOS",compound="none",underline="-1",)
        self.TNotebook_Loads = tk.Frame(self.TNotebook)
        self.TNotebook.add(self.TNotebook_Loads, padding=3)
        self.TNotebook.tab(3, text="Loads",compound="left",underline="-1",)
        self.TNotebook_Calculate = tk.Frame(self.TNotebook)
        self.TNotebook.add(self.TNotebook_Calculate, padding=3)
        self.TNotebook.tab(4, text="Calculate",compound="none",underline="-1",)
        self.TNotebook_t1 = tk.Frame(self.TNotebook)
        self.TNotebook.add(self.TNotebook_t1, padding=3)
        self.TNotebook.tab(5, text="Output / Result", compound="none"
                ,underline="-1", )

        self.Labelframe_Bolt_Def = tk.LabelFrame(self.TNotebook_Bolt)
        self.Labelframe_Bolt_Def.place(relx=0.024, rely=0.176, relheight=0.798
                , relwidth=0.955)
        self.Labelframe_Bolt_Def.configure(relief='groove')
        self.Labelframe_Bolt_Def.configure(text='''Bolt Definition''')

        self.TCombobox_Bolt = ttk.Combobox(self.Labelframe_Bolt_Def)
        self.TCombobox_Bolt.place(relx=0.288, rely=0.155, relheight=0.065
                , relwidth=0.284, bordermode='ignore')
        self.TCombobox_Bolt.configure(textvariable=bat_gui_support.combo_bolt)
        self.TCombobox_Bolt.configure(takefocus="")

        self.Label_Jt = tk.Label(self.Labelframe_Bolt_Def)
        self.Label_Jt.place(relx=0.03, rely=0.078, height=26, width=158
                , bordermode='ignore')
        self.Label_Jt.configure(activebackground="#f9f9f9")
        self.Label_Jt.configure(anchor='e')
        self.Label_Jt.configure(text='''Joint MOS Type:''')

        self.Radiobutton_Jt_min = tk.Radiobutton(self.Labelframe_Bolt_Def)
        self.Radiobutton_Jt_min.place(relx=0.273, rely=0.075, relheight=0.068
                , relwidth=0.153, bordermode='ignore')
        self.Radiobutton_Jt_min.configure(activebackground="#f9f9f9")
        self.Radiobutton_Jt_min.configure(justify='left')
        self.Radiobutton_Jt_min.configure(text='''MIN (STD)''')
        self.Radiobutton_Jt_min.configure(value="0")
        self.Radiobutton_Jt_min.configure(variable=bat_gui_support.joint_mos_type)

        self.Radiobutton_Jt_mean = tk.Radiobutton(self.Labelframe_Bolt_Def)
        self.Radiobutton_Jt_mean.place(relx=0.44, rely=0.078, relheight=0.065
                , relwidth=0.152, bordermode='ignore')
        self.Radiobutton_Jt_mean.configure(activebackground="#f9f9f9")
        self.Radiobutton_Jt_mean.configure(justify='left')
        self.Radiobutton_Jt_mean.configure(text='''MEAN''')
        self.Radiobutton_Jt_mean.configure(value="1")
        self.Radiobutton_Jt_mean.configure(variable=bat_gui_support.joint_mos_type)

        self.Label_Bolt = tk.Label(self.Labelframe_Bolt_Def)
        self.Label_Bolt.place(relx=0.03, rely=0.155, height=26, width=158
                , bordermode='ignore')
        self.Label_Bolt.configure(activebackground="#f9f9f9")
        self.Label_Bolt.configure(anchor='e')
        self.Label_Bolt.configure(text='''Bolt:''')

        self.Label_Bolt_Material = tk.Label(self.Labelframe_Bolt_Def)
        self.Label_Bolt_Material.place(relx=0.03, rely=0.235, height=26
                , width=158, bordermode='ignore')
        self.Label_Bolt_Material.configure(activebackground="#f9f9f9")
        self.Label_Bolt_Material.configure(anchor='e')
        self.Label_Bolt_Material.configure(text='''Bolt Material:''')

        self.TCombobox_Bolt_Material = ttk.Combobox(self.Labelframe_Bolt_Def)
        self.TCombobox_Bolt_Material.place(relx=0.288, rely=0.235
                , relheight=0.065, relwidth=0.284, bordermode='ignore')
        self.TCombobox_Bolt_Material.configure(textvariable=bat_gui_support.combo_bolt_mat)
        self.TCombobox_Bolt_Material.configure(takefocus="")
        self.TCombobox_Bolt_Material.configure(cursor="xterm")

        self.TLabel1 = ttk.Label(self.Labelframe_Bolt_Def)
        self.TLabel1.place(relx=0.027, rely=0.415, height=26, width=267
                , bordermode='ignore')
        self.TLabel1.configure(background="#d9d9d9")
        self.TLabel1.configure(foreground="#000000")
        self.TLabel1.configure(font="TkDefaultFont")
        self.TLabel1.configure(relief="flat")
        self.TLabel1.configure(anchor='e')
        self.TLabel1.configure(justify='left')
        self.TLabel1.configure(text='''Coefficient of Friction - Bolt Head:''')

        self.TLabel2 = ttk.Label(self.Labelframe_Bolt_Def)
        self.TLabel2.place(relx=0.47, rely=0.338, height=26, width=56
                , bordermode='ignore')
        self.TLabel2.configure(background="#d9d9d9")
        self.TLabel2.configure(foreground="#000000")
        self.TLabel2.configure(font="TkDefaultFont")
        self.TLabel2.configure(relief="flat")
        self.TLabel2.configure(anchor='center')
        self.TLabel2.configure(justify='left')
        self.TLabel2.configure(text='''MIN''')

        self.TLabel2_1 = ttk.Label(self.Labelframe_Bolt_Def)
        self.TLabel2_1.place(relx=0.652, rely=0.338, height=26, width=57
                , bordermode='ignore')
        self.TLabel2_1.configure(background="#d9d9d9")
        self.TLabel2_1.configure(foreground="#000000")
        self.TLabel2_1.configure(font="TkDefaultFont")
        self.TLabel2_1.configure(relief="flat")
        self.TLabel2_1.configure(anchor='center')
        self.TLabel2_1.configure(justify='left')
        self.TLabel2_1.configure(text='''MAX''')

        self.Entry_Cof_Head_Min = tk.Entry(self.Labelframe_Bolt_Def)
        self.Entry_Cof_Head_Min.place(relx=0.44, rely=0.415, height=25
                , relwidth=0.134, bordermode='ignore')
        self.Entry_Cof_Head_Min.configure(background="white")
        self.Entry_Cof_Head_Min.configure(font="TkFixedFont")
        self.Entry_Cof_Head_Min.configure(selectbackground="#c4c4c4")

        self.Entry_Cof_Head_Max = tk.Entry(self.Labelframe_Bolt_Def)
        self.Entry_Cof_Head_Max.place(relx=0.621, rely=0.415, height=25
                , relwidth=0.134, bordermode='ignore')
        self.Entry_Cof_Head_Max.configure(background="white")
        self.Entry_Cof_Head_Max.configure(font="TkFixedFont")
        self.Entry_Cof_Head_Max.configure(selectbackground="#c4c4c4")

        self.TLabel1_8 = ttk.Label(self.Labelframe_Bolt_Def)
        self.TLabel1_8.place(relx=0.027, rely=0.488, height=26, width=267
                , bordermode='ignore')
        self.TLabel1_8.configure(background="#d9d9d9")
        self.TLabel1_8.configure(foreground="#000000")
        self.TLabel1_8.configure(font="TkDefaultFont")
        self.TLabel1_8.configure(relief="flat")
        self.TLabel1_8.configure(anchor='e')
        self.TLabel1_8.configure(justify='left')
        self.TLabel1_8.configure(text='''Coefficient of Friction - Thread:''')

        self.Entry_Cof_Thread_Min = tk.Entry(self.Labelframe_Bolt_Def)
        self.Entry_Cof_Thread_Min.place(relx=0.44, rely=0.495, height=25
                , relwidth=0.134, bordermode='ignore')
        self.Entry_Cof_Thread_Min.configure(background="white")
        self.Entry_Cof_Thread_Min.configure(font="TkFixedFont")
        self.Entry_Cof_Thread_Min.configure(selectbackground="#c4c4c4")

        self.Entry_Cof_Thread_Max = tk.Entry(self.Labelframe_Bolt_Def)
        self.Entry_Cof_Thread_Max.place(relx=0.621, rely=0.495, height=25
                , relwidth=0.134, bordermode='ignore')
        self.Entry_Cof_Thread_Max.configure(background="white")
        self.Entry_Cof_Thread_Max.configure(font="TkFixedFont")
        self.Entry_Cof_Thread_Max.configure(selectbackground="#c4c4c4")

        self.TLabel1_9 = ttk.Label(self.Labelframe_Bolt_Def)
        self.TLabel1_9.place(relx=0.212, rely=0.675, height=26, width=166
                , bordermode='ignore')
        self.TLabel1_9.configure(background="#d9d9d9")
        self.TLabel1_9.configure(foreground="#000000")
        self.TLabel1_9.configure(font="TkDefaultFont")
        self.TLabel1_9.configure(relief="flat")
        self.TLabel1_9.configure(anchor='e')
        self.TLabel1_9.configure(justify='left')
        self.TLabel1_9.configure(text='''Tightening Torque:''')

        self.TSeparator1 = ttk.Separator(self.Labelframe_Bolt_Def)
        self.TSeparator1.place(relx=0.042, rely=0.615, relwidth=0.921
                , bordermode='ignore')

        self.Entry_Tight_Torque = tk.Entry(self.Labelframe_Bolt_Def)
        self.Entry_Tight_Torque.place(relx=0.47, rely=0.675, height=25
                , relwidth=0.134, bordermode='ignore')
        self.Entry_Tight_Torque.configure(background="white")
        self.Entry_Tight_Torque.configure(font="TkFixedFont")
        self.Entry_Tight_Torque.configure(selectbackground="#c4c4c4")

        self.TLabel2_11 = ttk.Label(self.Labelframe_Bolt_Def)
        self.TLabel2_11.place(relx=0.621, rely=0.675, height=26, width=57
                , bordermode='ignore')
        self.TLabel2_11.configure(background="#d9d9d9")
        self.TLabel2_11.configure(foreground="#000000")
        self.TLabel2_11.configure(font="TkDefaultFont")
        self.TLabel2_11.configure(relief="flat")
        self.TLabel2_11.configure(anchor='center')
        self.TLabel2_11.configure(justify='left')
        self.TLabel2_11.configure(text='''Nm''')

        self.TLabel1_10 = ttk.Label(self.Labelframe_Bolt_Def)
        self.TLabel1_10.place(relx=0.015, rely=0.753, height=26, width=313
                , bordermode='ignore')
        self.TLabel1_10.configure(background="#d9d9d9")
        self.TLabel1_10.configure(foreground="#000000")
        self.TLabel1_10.configure(font="TkDefaultFont")
        self.TLabel1_10.configure(relief="flat")
        self.TLabel1_10.configure(anchor='e')
        self.TLabel1_10.configure(justify='left')
        self.TLabel1_10.configure(text='''Torque Tolerance of Tightening Device:''')

        self.TLabel2_12 = ttk.Label(self.Labelframe_Bolt_Def)
        self.TLabel2_12.place(relx=0.621, rely=0.753, height=26, width=57
                , bordermode='ignore')
        self.TLabel2_12.configure(background="#d9d9d9")
        self.TLabel2_12.configure(foreground="#000000")
        self.TLabel2_12.configure(font="TkDefaultFont")
        self.TLabel2_12.configure(relief="flat")
        self.TLabel2_12.configure(anchor='center')
        self.TLabel2_12.configure(justify='left')
        self.TLabel2_12.configure(text='''Nm''')

        self.Entry_Torque_Tol = tk.Entry(self.Labelframe_Bolt_Def)
        self.Entry_Torque_Tol.place(relx=0.47, rely=0.753, height=25
                , relwidth=0.134, bordermode='ignore')
        self.Entry_Torque_Tol.configure(background="white")
        self.Entry_Torque_Tol.configure(font="TkFixedFont")
        self.Entry_Torque_Tol.configure(selectbackground="#c4c4c4")

        self.TLabel1_11 = ttk.Label(self.Labelframe_Bolt_Def)
        self.TLabel1_11.place(relx=0.015, rely=0.83, height=26, width=313
                , bordermode='ignore')
        self.TLabel1_11.configure(background="#d9d9d9")
        self.TLabel1_11.configure(foreground="#000000")
        self.TLabel1_11.configure(font="TkDefaultFont")
        self.TLabel1_11.configure(relief="flat")
        self.TLabel1_11.configure(anchor='e')
        self.TLabel1_11.configure(justify='left')
        self.TLabel1_11.configure(text='''Locking Device Used:''')

        self.TLabel1_1 = ttk.Label(self.Labelframe_Bolt_Def)
        self.TLabel1_1.place(relx=0.015, rely=0.91, height=26, width=313
                , bordermode='ignore')
        self.TLabel1_1.configure(background="#d9d9d9")
        self.TLabel1_1.configure(foreground="#000000")
        self.TLabel1_1.configure(font="TkDefaultFont")
        self.TLabel1_1.configure(relief="flat")
        self.TLabel1_1.configure(anchor='e')
        self.TLabel1_1.configure(justify='left')
        self.TLabel1_1.configure(text='''Loading Plane Factor:''')

        self.Radiobutton_Lock_No = tk.Radiobutton(self.Labelframe_Bolt_Def)
        self.Radiobutton_Lock_No.place(relx=0.456, rely=0.835, relheight=0.058
                , relwidth=0.102, bordermode='ignore')
        self.Radiobutton_Lock_No.configure(activebackground="#f9f9f9")
        self.Radiobutton_Lock_No.configure(justify='left')
        self.Radiobutton_Lock_No.configure(text='''NO''')
        self.Radiobutton_Lock_No.configure(value="0")
        self.Radiobutton_Lock_No.configure(variable=bat_gui_support.locking_device)
        self.Radiobutton_Lock_No.bind('<Button-1>',lambda e:bat_gui_support.locking_device_no(e))

        self.Radiobutton_Lock_Yes = tk.Radiobutton(self.Labelframe_Bolt_Def)
        self.Radiobutton_Lock_Yes.place(relx=0.583, rely=0.835, relheight=0.058
                , relwidth=0.102, bordermode='ignore')
        self.Radiobutton_Lock_Yes.configure(activebackground="#f9f9f9")
        self.Radiobutton_Lock_Yes.configure(justify='left')
        self.Radiobutton_Lock_Yes.configure(text='''YES''')
        self.Radiobutton_Lock_Yes.configure(value="1")
        self.Radiobutton_Lock_Yes.configure(variable=bat_gui_support.locking_device)
        self.Radiobutton_Lock_Yes.bind('<Button-1>',lambda e:bat_gui_support.locking_device_yes(e))

        self.TLabel2_13 = ttk.Label(self.Labelframe_Bolt_Def)
        self.TLabel2_13.place(relx=0.894, rely=0.835, height=26, width=57
                , bordermode='ignore')
        self.TLabel2_13.configure(background="#d9d9d9")
        self.TLabel2_13.configure(foreground="#000000")
        self.TLabel2_13.configure(font="TkDefaultFont")
        self.TLabel2_13.configure(relief="flat")
        self.TLabel2_13.configure(anchor='center')
        self.TLabel2_13.configure(justify='left')
        self.TLabel2_13.configure(text='''Nm''')

        self.Entry_Prevailing_Torque = tk.Entry(self.Labelframe_Bolt_Def)
        self.Entry_Prevailing_Torque.place(relx=0.802, rely=0.835, height=25
                , relwidth=0.081, bordermode='ignore')
        self.Entry_Prevailing_Torque.configure(background="white")
        self.Entry_Prevailing_Torque.configure(font="TkFixedFont")
        self.Entry_Prevailing_Torque.configure(selectbackground="#c4c4c4")

        self.TLabel2_2 = ttk.Label(self.Labelframe_Bolt_Def)
        self.TLabel2_2.place(relx=0.727, rely=0.835, height=26, width=56
                , bordermode='ignore')
        self.TLabel2_2.configure(background="#d9d9d9")
        self.TLabel2_2.configure(foreground="#000000")
        self.TLabel2_2.configure(font="TkDefaultFont")
        self.TLabel2_2.configure(relief="flat")
        self.TLabel2_2.configure(anchor='center')
        self.TLabel2_2.configure(justify='left')
        self.TLabel2_2.configure(text='''Tp:''')

        self.Entry_Loading_Plane_Factor = tk.Entry(self.Labelframe_Bolt_Def)
        self.Entry_Loading_Plane_Factor.place(relx=0.47, rely=0.91, height=25
                , relwidth=0.134, bordermode='ignore')
        self.Entry_Loading_Plane_Factor.configure(background="white")
        self.Entry_Loading_Plane_Factor.configure(font="TkFixedFont")
        self.Entry_Loading_Plane_Factor.configure(selectbackground="#c4c4c4")

        self.Label_Method = tk.Label(self.TNotebook_Bolt)
        self.Label_Method.place(relx=0.027, rely=0.04, height=26, width=111)
        self.Label_Method.configure(activebackground="#f9f9f9")
        self.Label_Method.configure(anchor='e')
        self.Label_Method.configure(text='''Method:''')

        self.Radiobutton_Esapss = tk.Radiobutton(self.TNotebook_Bolt)
        self.Radiobutton_Esapss.place(relx=0.171, rely=0.04, relheight=0.052
                , relwidth=0.184)
        self.Radiobutton_Esapss.configure(activebackground="#f9f9f9")
        self.Radiobutton_Esapss.configure(justify='left')
        self.Radiobutton_Esapss.configure(text='''ESA PSS-03''')
        self.Radiobutton_Esapss.configure(value="0")
        self.Radiobutton_Esapss.configure(variable=bat_gui_support.method_sel)
        self.Radiobutton_Esapss.bind('<Button-1>',lambda e:bat_gui_support.radio_esapss(e))

        self.Radiobutton_VDI2230 = tk.Radiobutton(self.TNotebook_Bolt)
        self.Radiobutton_VDI2230.place(relx=0.643, rely=0.04, relheight=0.05
                , relwidth=0.2)
        self.Radiobutton_VDI2230.configure(activebackground="#f9f9f9")
        self.Radiobutton_VDI2230.configure(justify='left')
        self.Radiobutton_VDI2230.configure(text='''VDI 2230''')
        self.Radiobutton_VDI2230.configure(value="2")
        self.Radiobutton_VDI2230.configure(variable=bat_gui_support.method_sel)
        self.Radiobutton_VDI2230.bind('<Button-1>',lambda e:bat_gui_support.radio_vdi2230(e))

        self.Radiobutton_ECSS = tk.Radiobutton(self.TNotebook_Bolt)
        self.Radiobutton_ECSS.place(relx=0.401, rely=0.04, relheight=0.052
                , relwidth=0.199)
        self.Radiobutton_ECSS.configure(activebackground="#f9f9f9")
        self.Radiobutton_ECSS.configure(justify='left')
        self.Radiobutton_ECSS.configure(text='''ECSS bla''')
        self.Radiobutton_ECSS.configure(value="1")
        self.Radiobutton_ECSS.configure(variable=bat_gui_support.method_sel)
        self.Radiobutton_ECSS.bind('<Button-1>',lambda e:bat_gui_support.radio_ecss(e))

        self.Label1 = tk.Label(self.TNotebook_Bolt)
        self.Label1.place(relx=0.03, rely=0.102, height=25, width=111)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(anchor='e')
        self.Label1.configure(text='''Project Title:''')

        self.Entry_project_name = tk.Entry(self.TNotebook_Bolt)
        self.Entry_project_name.place(relx=0.2, rely=0.102, height=25
                , relwidth=0.778)
        self.Entry_project_name.configure(background="white")
        self.Entry_project_name.configure(font="TkFixedFont")
        self.Entry_project_name.configure(selectbackground="#c4c4c4")

        self.Labelframe2 = tk.LabelFrame(self.TNotebook_CP)
        self.Labelframe2.place(relx=0.026, rely=0.04, relheight=0.924
                , relwidth=0.941)
        self.Labelframe2.configure(relief='groove')
        self.Labelframe2.configure(text='''Clamped Parts Definition''')

        self.Label3 = tk.Label(self.Labelframe2)
        self.Label3.place(relx=0.014, rely=0.065, height=25, width=317
                , bordermode='ignore')
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(anchor='e')
        self.Label3.configure(text='''Minimum CoF between Clamped Parts:''')

        self.Label3_7 = tk.Label(self.Labelframe2)
        self.Label3_7.place(relx=0.014, rely=0.194, height=25, width=317
                , bordermode='ignore')
        self.Label3_7.configure(activebackground="#f9f9f9")
        self.Label3_7.configure(anchor='e')
        self.Label3_7.configure(text='''Through Hole Diameter:''')

        self.Label3_8 = tk.Label(self.Labelframe2)
        self.Label3_8.place(relx=0.014, rely=0.13, height=25, width=317
                , bordermode='ignore')
        self.Label3_8.configure(activebackground="#f9f9f9")
        self.Label3_8.configure(anchor='e')
        self.Label3_8.configure(text='''Number of Shear Planes:''')

        self.Entry_cof_clamp = tk.Entry(self.Labelframe2)
        self.Entry_cof_clamp.place(relx=0.477, rely=0.065, height=25
                , relwidth=0.172, bordermode='ignore')
        self.Entry_cof_clamp.configure(background="white")
        self.Entry_cof_clamp.configure(font="TkFixedFont")
        self.Entry_cof_clamp.configure(selectbackground="#c4c4c4")

        self.Spinbox_nmbr_shear_planes = tk.Spinbox(self.Labelframe2, from_=1.0, to=100.0)
        self.Spinbox_nmbr_shear_planes.place(relx=0.477, rely=0.13
                , relheight=0.054, relwidth=0.172, bordermode='ignore')
        self.Spinbox_nmbr_shear_planes.configure(activebackground="#f9f9f9")
        self.Spinbox_nmbr_shear_planes.configure(background="white")
        self.Spinbox_nmbr_shear_planes.configure(font="TkDefaultFont")
        self.Spinbox_nmbr_shear_planes.configure(highlightbackground="black")
        self.Spinbox_nmbr_shear_planes.configure(selectbackground="#c4c4c4")
        self.Spinbox_nmbr_shear_planes.configure(textvariable=bat_gui_support.spinbox_nmbr_shear_planes)

        self.Entry_throughhole_diameter = tk.Entry(self.Labelframe2)
        self.Entry_throughhole_diameter.place(relx=0.477, rely=0.194, height=25
                , relwidth=0.172, bordermode='ignore')
        self.Entry_throughhole_diameter.configure(background="white")
        self.Entry_throughhole_diameter.configure(font="TkFixedFont")
        self.Entry_throughhole_diameter.configure(selectbackground="#c4c4c4")

        self.Label4 = tk.Label(self.Labelframe2)
        self.Label4.place(relx=0.655, rely=0.194, height=25, width=59
                , bordermode='ignore')
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(text='''mm''')

        self.Label3_1 = tk.Label(self.Labelframe2)
        self.Label3_1.place(relx=0.014, rely=0.259, height=25, width=317
                , bordermode='ignore')
        self.Label3_1.configure(activebackground="#f9f9f9")
        self.Label3_1.configure(anchor='e')
        self.Label3_1.configure(text='''Substitutional Diameter - DA:''')

        self.Entry_subst_da = tk.Entry(self.Labelframe2)
        self.Entry_subst_da.place(relx=0.477, rely=0.259, height=25
                , relwidth=0.172, bordermode='ignore')
        self.Entry_subst_da.configure(background="white")
        self.Entry_subst_da.configure(font="TkFixedFont")
        self.Entry_subst_da.configure(selectbackground="#c4c4c4")

        self.Label4_10 = tk.Label(self.Labelframe2)
        self.Label4_10.place(relx=0.655, rely=0.259, height=25, width=59
                , bordermode='ignore')
        self.Label4_10.configure(activebackground="#f9f9f9")
        self.Label4_10.configure(text='''mm''')

        self.Button_del_cp = tk.Button(self.Labelframe2)
        self.Button_del_cp.place(relx=0.805, rely=0.583, height=25, width=101
                , bordermode='ignore')
        self.Button_del_cp.configure(activebackground="#f9f9f9")
        self.Button_del_cp.configure(text='''DELETE''')
        self.Button_del_cp.bind('<Button-1>',lambda e:bat_gui_support.button_delete_cp(e))

        self.Labelframe3 = tk.LabelFrame(self.Labelframe2)
        self.Labelframe3.place(relx=0.055, rely=0.432, relheight=0.207
                , relwidth=0.708, bordermode='ignore')
        self.Labelframe3.configure(relief='groove')
        self.Labelframe3.configure(text='''Define Clamp Part (i)''')

        self.TCombobox_cp_mat = ttk.Combobox(self.Labelframe3)
        self.TCombobox_cp_mat.place(relx=0.044, rely=0.521, relheight=0.271
                , relwidth=0.322, bordermode='ignore')
        self.TCombobox_cp_mat.configure(textvariable=bat_gui_support.combo_clamp_mat)
        self.TCombobox_cp_mat.configure(takefocus="")

        self.Label5 = tk.Label(self.Labelframe3)
        self.Label5.place(relx=0.044, rely=0.208, height=26, width=162
                , bordermode='ignore')
        self.Label5.configure(activebackground="#f9f9f9")
        self.Label5.configure(text='''Material:''')

        self.Label5_11 = tk.Label(self.Labelframe3)
        self.Label5_11.place(relx=0.43, rely=0.208, height=26, width=129
                , bordermode='ignore')
        self.Label5_11.configure(activebackground="#f9f9f9")
        self.Label5_11.configure(text='''Thickness:''')

        self.Entry_cp_thk = tk.Entry(self.Labelframe3)
        self.Entry_cp_thk.place(relx=0.43, rely=0.521, height=25, relwidth=0.243
                , bordermode='ignore')
        self.Entry_cp_thk.configure(background="white")
        self.Entry_cp_thk.configure(font="TkFixedFont")
        self.Entry_cp_thk.configure(selectbackground="#c4c4c4")

        self.Button_add_cp = tk.Button(self.Labelframe3)
        self.Button_add_cp.place(relx=0.829, rely=0.313, height=41, width=71
                , bordermode='ignore')
        self.Button_add_cp.configure(activebackground="#f9f9f9")
        self.Button_add_cp.configure(text='''ADD''')
        self.Button_add_cp.bind('<Button-1>',lambda e:bat_gui_support.button_add_cp(e))

        self.Label4_2 = tk.Label(self.Labelframe3)
        self.Label4_2.place(relx=0.674, rely=0.521, height=25, width=59
                , bordermode='ignore')
        self.Label4_2.configure(activebackground="#f9f9f9")
        self.Label4_2.configure(text='''mm''')

        self.Button_cp_down = tk.Button(self.Labelframe2)
        self.Button_cp_down.place(relx=0.805, rely=0.518, height=25, width=101
                , bordermode='ignore')
        self.Button_cp_down.configure(activebackground="#f9f9f9")
        self.Button_cp_down.configure(text='''DOWN''')
        self.Button_cp_down.bind('<Button-1>',lambda e:bat_gui_support.button_down_cp(e))

        self.Button_cp_up = tk.Button(self.Labelframe2)
        self.Button_cp_up.place(relx=0.805, rely=0.454, height=25, width=101
                , bordermode='ignore')
        self.Button_cp_up.configure(activebackground="#f9f9f9")
        self.Button_cp_up.configure(text='''UP''')
        self.Button_cp_up.bind('<Button-1>',lambda e:bat_gui_support.button_up_cp(e))

        self.Listbox_clamped_parts = tk.Listbox(self.Labelframe2)
        self.Listbox_clamped_parts.place(relx=0.055, rely=0.67, relheight=0.294
                , relwidth=0.895, bordermode='ignore')
        self.Listbox_clamped_parts.configure(background="white")
        self.Listbox_clamped_parts.configure(font="TkFixedFont")
        self.Listbox_clamped_parts.configure(selectbackground="#c4c4c4")

        self.Checkbutton_DA = tk.Checkbutton(self.Labelframe2)
        self.Checkbutton_DA.place(relx=0.723, rely=0.259, relheight=0.054
                , relwidth=0.146, bordermode='ignore')
        self.Checkbutton_DA.configure(activebackground="#f9f9f9")
        self.Checkbutton_DA.configure(justify='left')
        self.Checkbutton_DA.configure(text='''Auto-DA''')
        self.Checkbutton_DA.configure(variable=bat_gui_support.cheVal_DA)
        self.Checkbutton_DA.bind('<Button-1>',lambda e:bat_gui_support.auto_da_checkbox(e))

        self.TCombobox_shim = ttk.Combobox(self.Labelframe2)
        self.TCombobox_shim.place(relx=0.477, rely=0.346, relheight=0.054
                , relwidth=0.172, bordermode='ignore')
        self.TCombobox_shim.configure(textvariable=bat_gui_support.combo_shim)
        self.TCombobox_shim.configure(takefocus="")

        self.TCombobox_shim_mat = ttk.Combobox(self.Labelframe2)
        self.TCombobox_shim_mat.place(relx=0.682, rely=0.346, relheight=0.054
                , relwidth=0.172, bordermode='ignore')
        self.TCombobox_shim_mat.configure(textvariable=bat_gui_support.combo_shim_mat)
        self.TCombobox_shim_mat.configure(takefocus="")

        self.Checkbutton_use_shim = tk.Checkbutton(self.Labelframe2)
        self.Checkbutton_use_shim.place(relx=0.314, rely=0.346, relheight=0.05
                , relwidth=0.132, bordermode='ignore')
        self.Checkbutton_use_shim.configure(activebackground="#f9f9f9")
        self.Checkbutton_use_shim.configure(justify='left')
        self.Checkbutton_use_shim.configure(text='''Use Shim:''')
        self.Checkbutton_use_shim.configure(variable=bat_gui_support.cheVal_use_shim)
        self.Checkbutton_use_shim.bind('<Button-1>',lambda e:bat_gui_support.use_shim_checkbox(e))

        self.Labelframe1 = tk.LabelFrame(self.TNotebook_FOS)
        self.Labelframe1.place(relx=0.024, rely=0.04, relheight=0.922
                , relwidth=0.929)
        self.Labelframe1.configure(relief='groove')
        self.Labelframe1.configure(text='''Factors of Safety - FOS''')

        self.Label2 = tk.Label(self.Labelframe1)
        self.Label2.place(relx=0.081, rely=0.084, height=24, width=236
                , bordermode='ignore')
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(anchor='e')
        self.Label2.configure(text='''Factor of Safety Yield - FOS_y:''')

        self.Label2_1 = tk.Label(self.Labelframe1)
        self.Label2_1.place(relx=0.081, rely=0.169, height=24, width=236
                , bordermode='ignore')
        self.Label2_1.configure(activebackground="#f9f9f9")
        self.Label2_1.configure(anchor='e')
        self.Label2_1.configure(text='''Factor of Safety Ultimate - FOS_u:''')

        self.Label2_2 = tk.Label(self.Labelframe1)
        self.Label2_2.place(relx=0.081, rely=0.338, height=24, width=236
                , bordermode='ignore')
        self.Label2_2.configure(activebackground="#f9f9f9")
        self.Label2_2.configure(anchor='e')
        self.Label2_2.configure(text='''Factor of Safety Gapping - FOS_gap:''')

        self.Label2_3 = tk.Label(self.Labelframe1)
        self.Label2_3.place(relx=0.028, rely=0.253, height=24, width=275
                , bordermode='ignore')
        self.Label2_3.configure(activebackground="#f9f9f9")
        self.Label2_3.configure(anchor='e')
        self.Label2_3.configure(text='''Factor of Safety Slippage - FOS_slip:''')

        self.Entry_fos_y = tk.Entry(self.Labelframe1)
        self.Entry_fos_y.place(relx=0.452, rely=0.084, height=25, relwidth=0.16
                , bordermode='ignore')
        self.Entry_fos_y.configure(background="white")
        self.Entry_fos_y.configure(font="TkFixedFont")
        self.Entry_fos_y.configure(selectbackground="#c4c4c4")

        self.Entry_fos_u = tk.Entry(self.Labelframe1)
        self.Entry_fos_u.place(relx=0.452, rely=0.169, height=25, relwidth=0.16
                , bordermode='ignore')
        self.Entry_fos_u.configure(background="white")
        self.Entry_fos_u.configure(font="TkFixedFont")
        self.Entry_fos_u.configure(selectbackground="#c4c4c4")

        self.Entry_fos_slip = tk.Entry(self.Labelframe1)
        self.Entry_fos_slip.place(relx=0.452, rely=0.253, height=25
                , relwidth=0.16, bordermode='ignore')
        self.Entry_fos_slip.configure(background="white")
        self.Entry_fos_slip.configure(font="TkFixedFont")
        self.Entry_fos_slip.configure(selectbackground="#c4c4c4")

        self.Entry_fos_gap = tk.Entry(self.Labelframe1)
        self.Entry_fos_gap.place(relx=0.452, rely=0.338, height=25, relwidth=0.16
                , bordermode='ignore')
        self.Entry_fos_gap.configure(background="white")
        self.Entry_fos_gap.configure(font="TkFixedFont")
        self.Entry_fos_gap.configure(selectbackground="#c4c4c4")

        self.Labelframe4 = tk.LabelFrame(self.TNotebook_Loads)
        self.Labelframe4.place(relx=0.026, rely=0.04, relheight=0.15
                , relwidth=0.938)
        self.Labelframe4.configure(relief='groove')
        self.Labelframe4.configure(text='''Temperature Input''')

        self.Label6 = tk.Label(self.Labelframe4)
        self.Label6.place(relx=0.041, rely=0.4, height=25, width=99
                , bordermode='ignore')
        self.Label6.configure(text='''delta T:''')

        self.Entry_delta_T = tk.Entry(self.Labelframe4)
        self.Entry_delta_T.place(relx=0.178, rely=0.4, height=25, relwidth=0.145
                , bordermode='ignore')
        self.Entry_delta_T.configure(background="white")
        self.Entry_delta_T.configure(font="TkFixedFont")

        self.Label7 = tk.Label(self.Labelframe4)
        self.Label7.place(relx=0.342, rely=0.4, height=25, width=89
                , bordermode='ignore')
        self.Label7.configure(text='''deg C / K''')

        self.Labelframe5 = tk.LabelFrame(self.TNotebook_Loads)
        self.Labelframe5.place(relx=0.026, rely=0.2, relheight=0.749
                , relwidth=0.938)
        self.Labelframe5.configure(relief='groove')
        self.Labelframe5.configure(text='''Bolt Loads''')

        self.Text_Bolt_Loads = tk.Text(self.Labelframe5)
        self.Text_Bolt_Loads.place(relx=0.041, rely=0.16, relheight=0.784
                , relwidth=0.925, bordermode='ignore')
        self.Text_Bolt_Loads.configure(background="white")
        self.Text_Bolt_Loads.configure(font="TkTextFont")
        self.Text_Bolt_Loads.configure(selectbackground="#c4c4c4")
        self.Text_Bolt_Loads.configure(wrap="word")

        self.Label8 = tk.Label(self.Labelframe5)
        self.Label8.place(relx=0.041, rely=0.08, height=25, width=670
                , bordermode='ignore')
        self.Label8.configure(anchor='w')
        self.Label8.configure(cursor="fleur")
        self.Label8.configure(text='''Example: load/bolt-ID (max. 12 char.), axial-force, lateral-force-1, lateral-force-2 (optional)''')

        self.Labelframe6 = tk.LabelFrame(self.TNotebook_Calculate)
        self.Labelframe6.place(relx=0.039, rely=0.04, relheight=0.309
                , relwidth=0.928)
        self.Labelframe6.configure(relief='groove')
        self.Labelframe6.configure(text='''BAT Files''')

        self.Label9 = tk.Label(self.Labelframe6)
        self.Label9.place(relx=0.028, rely=0.258, height=25, width=141
                , bordermode='ignore')
        self.Label9.configure(anchor='e')
        self.Label9.configure(text='''Saved Input File:''')

        self.Entry_Input_File = tk.Entry(self.Labelframe6)
        self.Entry_Input_File.place(relx=0.249, rely=0.258, height=25
                , relwidth=0.617, bordermode='ignore')
        self.Entry_Input_File.configure(background="white")
        self.Entry_Input_File.configure(font="TkFixedFont")

        self.Label9_1 = tk.Label(self.Labelframe6)
        self.Label9_1.place(relx=0.028, rely=0.581, height=25, width=141
                , bordermode='ignore')
        self.Label9_1.configure(activebackground="#f9f9f9")
        self.Label9_1.configure(anchor='e')
        self.Label9_1.configure(text='''Output File:''')

        self.Entry_Output_File = tk.Entry(self.Labelframe6)
        self.Entry_Output_File.place(relx=0.249, rely=0.581, height=25
                , relwidth=0.617, bordermode='ignore')
        self.Entry_Output_File.configure(background="white")
        self.Entry_Output_File.configure(font="TkFixedFont")
        self.Entry_Output_File.configure(selectbackground="#c4c4c4")

        self.Button_Save_Input = tk.Button(self.Labelframe6)
        self.Button_Save_Input.place(relx=0.885, rely=0.258, height=25, width=71
                , bordermode='ignore')
        self.Button_Save_Input.configure(text='''Save''')
        self.Button_Save_Input.bind('<Button-1>',lambda e:bat_gui_support.save_input_file(e))

        self.Button_Save_Output = tk.Button(self.Labelframe6)
        self.Button_Save_Output.place(relx=0.885, rely=0.581, height=25, width=71
                , bordermode='ignore')
        self.Button_Save_Output.configure(activebackground="#f9f9f9")
        self.Button_Save_Output.configure(text='''Save''')
        self.Button_Save_Output.bind('<Button-1>',lambda e:bat_gui_support.save_output_file(e))

        self.Labelframe7 = tk.LabelFrame(self.TNotebook_Calculate)
        self.Labelframe7.place(relx=0.039, rely=0.379, relheight=0.549
                , relwidth=0.928)
        self.Labelframe7.configure(relief='groove')
        self.Labelframe7.configure(text='''Execute Analysis''')

        self.Button_Analyze = tk.Button(self.Labelframe7)
        self.Button_Analyze.place(relx=0.055, rely=0.211, height=41, width=651
                , bordermode='ignore')
        self.Button_Analyze.configure(text='''Calculate''')
        self.Button_Analyze.bind('<Button-1>',lambda e:bat_gui_support.calculate(e))

        self.Scrolledtext_Output = ScrolledText(self.TNotebook_t1)
        self.Scrolledtext_Output.place(relx=0.026, rely=0.06, relheight=0.9
                , relwidth=0.954)
        self.Scrolledtext_Output.configure(background="white")
        self.Scrolledtext_Output.configure(font="TkTextFont")
        self.Scrolledtext_Output.configure(insertborderwidth="3")
        self.Scrolledtext_Output.configure(selectbackground="#c4c4c4")
        self.Scrolledtext_Output.configure(wrap="none")

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()





